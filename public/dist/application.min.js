"use strict";var ApplicationConfiguration=function(){var applicationModuleName="slabs",applicationModuleVendorDependencies=["ngResource","ngCookies","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("sidebar"),ApplicationConfiguration.registerModule("stage"),ApplicationConfiguration.registerModule("users"),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles","dropdown","/articles(/create)?"),Menus.addSubMenuItem("topbar","articles","List Articles","articles"),Menus.addSubMenuItem("topbar","articles","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("stage").factory("SlabsServices",["$resource",function($resource){return{network:$resource("/network/"),slabTypes:$resource("/slab/types"),slab:$resource("/slab/:slabType/:slabID"),slabList:$resource("/slab/:slabType")}}]),angular.module("sidebar").controller("SlabListController",["$scope","SlabsServices","$timeout",function($scope,SlabsServices,$timeout){$scope.typeChanged=function(id){$scope.slabList=SlabsServices.slabList.query({slabType:id})},$scope.$watch("slabList",function(){$timeout(function(){$(".slab-item").draggable({helper:"clone"})},100)}),$scope.slabList=SlabsServices.slabList.query({slabType:"api"})}]),angular.module("sidebar").directive("slabTypeSelector",["SlabsServices",function(SlabsServices){return{templateUrl:"/modules/sidebar/views/slab-type-selector.client.view.html",restrict:"E",link:function(scope){scope.types=SlabsServices.slabTypes.query(),scope.buttonClicked=function(slabTypeID){scope.typeChanged({slabTypeID:slabTypeID})}},scope:{typeChanged:"&"}}}]),angular.module("stage").config(["$stateProvider",function($stateProvider){$stateProvider.state("stage",{url:"/stage",templateUrl:"modules/stage/views/stage.client.view.html"}).state("stage.sidebar",{templateUrl:"modules/sidebar/views/slab-list.client.view.html"})}]),angular.module("stage").controller("StageController",["$scope","$state","SlabsServices","$sce","Jsplumb",function($scope,$state,SlabsServices,$sce,Jsplumb){function openOutputTabs(outputs){console.log(outputs),_.each(outputs,function(output){console.log(output),window.open(output.result)})}function runSlabNetwork(){var networkObject={title:"sample network",slabs:vm.slabs};SlabsServices.network.save({},networkObject,function(resp){console.log("network success!!"),console.log(resp),openOutputTabs(resp.outputs)},function(resp){console.log("network fail..."),console.log(resp)})}function openSlabSettings(slab){SlabsServices.slab.get({slabType:slab.type,slabID:slab.id},function(obj){obj.url?(vm.currentlyOpenSlab=slab.guid,vm.settingsPageVisible=!0,vm.iframeSrc=obj.url):console.log("error loading settings file")})}function updateConnections(sourceId,targetId,remove){_(vm.slabs).each(function(item){item.guid===targetId&&(remove!==!0?(item.dependencies=_.without(item.dependencies,sourceId),item.dependencies.push(sourceId)):item.dependencies=_.without(item.dependencies,sourceId))})}function newConnection(connection){var targetName=$(connection.target).data("slab-name"),sourceName=$(connection.source).data("slab-name");connection.getOverlay("label").setLabel(sourceName+" - "+targetName);var targetId=connection.target.id,sourceId=connection.source.id;console.log(sourceId+" is now connected to "+targetId),updateConnections(sourceId,targetId)}function removeConnection(connection){var targetId=connection.target.id,sourceId=connection.source.id;console.log(sourceId+" is now NOT connected to "+targetId),updateConnections(sourceId,targetId,!0)}function addSettingsToSlabList(data){var slab=_.findWhere(vm.slabs,{guid:vm.currentlyOpenSlab});slab.settings=data,console.dir(vm.slabs)}var vm=this;$state.go("stage.sidebar"),vm.slabs=[],vm.iframeSrc="",vm.currentlyOpenSlab="",vm.settingsPageVisible=!1,vm.runSlabNetwork=runSlabNetwork,vm.openSlabSettings=openSlabSettings;var jsPlumbInstance=Jsplumb.getInstance();$(".stage").droppable({drop:function(event,ui){var item=ui.helper[0],isPanel=item.classList.contains("panel")===!0?!0:!1;if(!isPanel){var slabID=item.getAttribute("data-slab-id"),slabType=item.getAttribute("data-slab-type"),slabName=item.getAttribute("data-slab-name"),guid="slab_"+Date.now(),left=ui.position.left,top=ui.position.top-50,slab={guid:guid,id:slabID,type:slabType,name:slabName,left:left,top:top,settings:{},dependencies:[]};vm.slabs.push(slab),$scope.$digest();var slabsIn=item.getAttribute("data-slab-in"),slabsOut=item.getAttribute("data-slab-out"),inConnectorsArray=["TopCenter","TopLeft","TopRight"],outConnectorsArray=["BottomCenter","BottomLeft","BottomRight"];inConnectorsArray.length=slabsIn,outConnectorsArray.length=slabsOut,Jsplumb.addEndPoint(jsPlumbInstance,guid,outConnectorsArray,inConnectorsArray),jsPlumbInstance.bind("connection",function(connInfo){newConnection(connInfo.connection)}),jsPlumbInstance.bind("connectionDetached",function(connInfo){removeConnection(connInfo.connection)}),jsPlumbInstance.draggable(jsPlumb.getSelector(".stage-container .panel"),{grid:[20,20]})}}}),window.submitSlabData=function(data){addSettingsToSlabList(data),vm.settingsPageVisible=!1,$scope.$digest()}}]),angular.module("stage").directive("slab",[function(){return{templateUrl:"/modules/stage/views/slab.client.view.html",restrict:"E",link:function(){},scope:{id:"=",guid:"=",type:"=",name:"=",left:"=",top:"=","in":"=",out:"=",openSettings:"&"}}}]),angular.module("stage").factory("Jsplumb",[function(){var connectorPaintStyle={lineWidth:4,strokeStyle:"#61B7CF",joinstyle:"round",outlineColor:"white",outlineWidth:2},connectorHoverStyle={lineWidth:4,strokeStyle:"#216477",outlineWidth:2,outlineColor:"white"},endpointHoverStyle={fillStyle:"#216477",strokeStyle:"#216477"},sourceEndpoint={endpoint:"Dot",paintStyle:{strokeStyle:"#7AB02C",fillStyle:"transparent",radius:4,lineWidth:3},isSource:!0,connector:["Flowchart",{stub:[40,60],gap:10,cornerRadius:5,alwaysRespectStubs:!0}],connectorStyle:connectorPaintStyle,hoverPaintStyle:endpointHoverStyle,connectorHoverStyle:connectorHoverStyle,dragOptions:{}},targetEndpoint={endpoint:"Dot",paintStyle:{strokeStyle:"#5bc0de",radius:4,fillStyle:"transparent",lineWidth:3},hoverPaintStyle:endpointHoverStyle,maxConnections:-1,dropOptions:{hoverClass:"hover",activeClass:"active"},isTarget:!0};return{getInstance:function(){return jsPlumb.getInstance({DragOptions:{cursor:"pointer",zIndex:2e3},ConnectionOverlays:[["Label",{location:.1,id:"label",cssClass:"aLabel"}]],Container:"stage-container"})},addEndPoint:function(instance,toId,sourceAnchors,targetAnchors){for(var i=0;i<sourceAnchors.length;i++){var sourceUUID=toId+sourceAnchors[i];instance.addEndpoint(toId,sourceEndpoint,{anchor:sourceAnchors[i],uuid:sourceUUID})}for(var j=0;j<targetAnchors.length;j++){var targetUUID=toId+targetAnchors[j];instance.addEndpoint(toId,targetEndpoint,{anchor:targetAnchors[j],uuid:targetUUID})}}}}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);